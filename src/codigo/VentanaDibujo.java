/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package codigo;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Shape;
import java.awt.geom.Ellipse2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Administrator
 */
public class VentanaDibujo extends javax.swing.JFrame {
    
    private static int DIMENSION_ARRAY = 8;
    
    BufferedImage buffer = null;
    int forma = 0;
    Color colorElegido = Color.BLACK;
    Color colorFondo = Color.WHITE;
    boolean seleccionar = false;
    boolean a = false;
    boolean rellenar = false;
    boolean linea1 = false;
    boolean cuentagotas;
    int lineax1 = 0;
    int lineay1 = 0;
    int posx = 0;
    int posy = 0;
    int puntoX = 0;
    int puntoY = 0;
    int i = 0;
    
//    Circulo[] listaCirculos = new Circulo[DIMENSION_ARRAY];
    
//    ArrayList<Circulo> listaNuevaCirculos = new ArrayList();
    ArrayList listaFormas = new ArrayList();
    
    /**
     * Creates new form VentanaDibujo
     */
    public VentanaDibujo() {                                                                        //En esta clase se crea el buffer y se pone el color del fondo.
        initComponents();
        setResizable(false);
        setTitle("Paint");
        buffer = (BufferedImage) jPanel1.createImage(jPanel1.getWidth(), jPanel1.getHeight());
        buffer.createGraphics();
        Graphics2D g2 = (Graphics2D) buffer.getGraphics();
        g2.setColor(colorFondo);
        g2.fillRect(0, 0, jPanel1.getWidth(), jPanel1.getHeight());
        
    }
    
    private boolean chequeaPunto(int x, int y){                                                 //Esta clase comprueba si el punto donde se ha hecho click contiene algun objeto.
        boolean contiene = false;
        int j = 0;
        while(j < listaFormas.size()){
            if(((Shape) listaFormas.get(j)).contains(x,y)){
               contiene = true; 
            }
            
            j++;
        }
        return contiene;
        
    }
    
    @Override
    public void paint(Graphics g){                                                  //Esta parte del programa escribe sobre la clase paint para que pinte las distintas formas.
        super.paintComponents(g);
        Graphics2D g2 = (Graphics2D) buffer.getGraphics();
        g2.setColor(colorFondo);
        g2.fillRect(0, 0, jPanel1.getWidth(), jPanel1.getHeight());
        int j = 0;
        while(j < listaFormas.size()){
            if(listaFormas.get(j) instanceof Circulo){
                 ((Circulo) listaFormas.get(j)).pintar(g2);
            }
            if(listaFormas.get(j) instanceof Triangulo){
                 ((Triangulo) listaFormas.get(j)).pintar(g2);
            }
            if(listaFormas.get(j) instanceof Cuadrado){
                 ((Cuadrado) listaFormas.get(j)).pintar(g2);
            }
            if(listaFormas.get(j) instanceof Rombo){
                 ((Rombo) listaFormas.get(j)).pintar(g2);
            }
            if(listaFormas.get(j) instanceof Cruz){
                 ((Cruz) listaFormas.get(j)).pintar(g2);
            }
            if(listaFormas.get(j) instanceof Estrella){
                 ((Estrella) listaFormas.get(j)).pintar(g2);
            }
            if(listaFormas.get(j) instanceof Linea){
                 ((Linea) listaFormas.get(j)).pintar(g2);
            }
            j++;
        }
        g2 = (Graphics2D) jPanel1.getGraphics();
        g2.drawImage(buffer, 0, 0, jPanel1.getWidth(), jPanel1.getHeight(), null);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jColorChooser1 = new javax.swing.JColorChooser();
        BotonAceptar = new javax.swing.JButton();
        BotonCancelar = new javax.swing.JButton();
        jDialog2 = new javax.swing.JDialog();
        jFileChooser1 = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jSlider1 = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        BotonColor = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        jButton9 = new javax.swing.JButton();
        jToggleButton3 = new javax.swing.JToggleButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        BotonAceptar.setText("Aceptar");
        BotonAceptar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                BotonAceptarMousePressed(evt);
            }
        });

        BotonCancelar.setText("Cancelar");
        BotonCancelar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                BotonCancelarMousePressed(evt);
            }
        });

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addComponent(jColorChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 601, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE))
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGap(133, 133, 133)
                .addComponent(BotonAceptar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BotonCancelar)
                .addGap(144, 144, 144))
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addComponent(jColorChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BotonAceptar)
                    .addComponent(BotonCancelar))
                .addContainerGap(59, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jDialog2Layout = new javax.swing.GroupLayout(jDialog2.getContentPane());
        jDialog2.getContentPane().setLayout(jDialog2Layout);
        jDialog2Layout.setHorizontalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jDialog2Layout.setVerticalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel1MouseDragged(evt);
            }
        });
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel1MousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 529, Short.MAX_VALUE)
        );

        jButton1.setText("Deshacer");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton1MousePressed(evt);
            }
        });

        jButton2.setText("Limpiar");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton2MousePressed(evt);
            }
        });

        jSlider1.setMaximum(300);
        jSlider1.setMinimum(2);
        jSlider1.setValue(20);
        jSlider1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jSlider1MouseDragged(evt);
            }
        });
        jSlider1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jSlider1MousePressed(evt);
            }
        });

        jLabel1.setText("20");

        jButton3.setText("T");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton3MousePressed(evt);
            }
        });

        jButton4.setText("C");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton4MousePressed(evt);
            }
        });

        BotonColor.setText("Color");
        BotonColor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                BotonColorMousePressed(evt);
            }
        });

        jButton5.setText("Sq");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton5MousePressed(evt);
            }
        });

        jButton6.setText("R");
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton6MousePressed(evt);
            }
        });

        jButton7.setText("Cr");
        jButton7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton7MousePressed(evt);
            }
        });

        jButton8.setText("Es");
        jButton8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton8MousePressed(evt);
            }
        });

        jToggleButton2.setText("Rellenar");
        jToggleButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jToggleButton2MousePressed(evt);
            }
        });

        jButton9.setText("L");
        jButton9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton9MousePressed(evt);
            }
        });

        jToggleButton3.setText("Cuentagotas");
        jToggleButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jToggleButton3MousePressed(evt);
            }
        });

        jMenu1.setText("Archivo");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Guardar");
        jMenuItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItem1MousePressed(evt);
            }
        });
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Editar");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton9)
                .addGap(70, 70, 70)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BotonColor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButton2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 200, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton1)
                                .addComponent(jButton2)
                                .addComponent(jLabel1)
                                .addComponent(jButton3)
                                .addComponent(jButton5)
                                .addComponent(jButton7)
                                .addComponent(jButton9)
                                .addComponent(BotonColor))
                            .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton8)
                            .addComponent(jButton6)
                            .addComponent(jButton4)
                            .addComponent(jToggleButton2)
                            .addComponent(jToggleButton3))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MousePressed
        posx= evt.getX();                                                               
        posy= evt.getY();
        i = 0;
        if(rellenar){                                                               //Este if comprueba si el tiene que crear objetos, rellenarlos, o coger el color que tengan.
            if(chequeaPunto(evt.getX(),evt.getY())){
            int j = 0;
        while(j < listaFormas.size()){                                              //Rellena un objeto si en lo que has hecho click es un objeto, o cambia de color el fondo si no hay nada.
            if(((Shape) listaFormas.get(j)).contains(evt.getX(),evt.getY())){
               if(listaFormas.get(j) instanceof Circulo){
                 ((Circulo) listaFormas.get(j)).relleno = true;
                 ((Circulo) listaFormas.get(j)).color = colorElegido;
            }
            if(listaFormas.get(j) instanceof Triangulo){
                 ((Triangulo) listaFormas.get(j)).relleno = true;
                 ((Triangulo) listaFormas.get(j)).color = colorElegido;
            }
            if(listaFormas.get(j) instanceof Cuadrado){
                 ((Cuadrado) listaFormas.get(j)).relleno = true;
                 ((Cuadrado) listaFormas.get(j)).color = colorElegido;
            }
            if(listaFormas.get(j) instanceof Rombo){
                 ((Rombo) listaFormas.get(j)).relleno = true;
                 ((Rombo) listaFormas.get(j)).color = colorElegido;
            }
            if(listaFormas.get(j) instanceof Cruz){
                 ((Cruz) listaFormas.get(j)).relleno = true;
                 ((Cruz) listaFormas.get(j)).color = colorElegido;
            }
            if(listaFormas.get(j) instanceof Estrella){
                 ((Estrella) listaFormas.get(j)).relleno = true;
                 ((Estrella) listaFormas.get(j)).color = colorElegido;
            }
            }
            
            j++;
        }
        }
            else{
                colorFondo = colorElegido;
            }
        }
        else if(!rellenar && !cuentagotas && !seleccionar){                                                             //Crea los objetos y los mete en un ArrayList
            switch (forma){
            case 0 : listaFormas.add(new Circulo(evt.getX(),evt.getY(), 1, colorElegido, false)); break;
            case 1 : listaFormas.add(new Triangulo(evt.getX(),evt.getY(), 1, 1, colorElegido, false)); break;
            case 2 : listaFormas.add(new Cuadrado(evt.getX(),evt.getY(), 1, 1, colorElegido, false)); break;
            case 3 : listaFormas.add(new Rombo(evt.getX(),evt.getY(), 1, 1, colorElegido, false)); break;
            case 4 : listaFormas.add(new Cruz(evt.getX(),evt.getY(), 1, 1, colorElegido, false)); break;
            case 5 : listaFormas.add(new Estrella(evt.getX(),evt.getY(), 1, 1, colorElegido, false)); break;
            case 6 : listaFormas.add(new Linea(evt.getX(),evt.getY(),1,1, colorElegido)); break;
                
            }
        }
        else if(cuentagotas){                                                                       //Coge el color del objeto en el que se ha hecho click, o del fondo si no habia nada.
            if(chequeaPunto(evt.getX(),evt.getY())){
                int j = 0;
                while(j < listaFormas.size()){
            if(((Shape) listaFormas.get(j)).contains(evt.getX(),evt.getY())){
               if(listaFormas.get(j) instanceof Circulo){                
                 colorElegido =((Circulo) listaFormas.get(j)).color;
            }
            if(listaFormas.get(j) instanceof Triangulo){
                 colorElegido =((Triangulo) listaFormas.get(j)).color;
            }
            if(listaFormas.get(j) instanceof Cuadrado){
                 colorElegido =((Cuadrado) listaFormas.get(j)).color;
            }
            if(listaFormas.get(j) instanceof Rombo){
                 colorElegido =((Rombo) listaFormas.get(j)).color;
            }
            if(listaFormas.get(j) instanceof Cruz){
                 colorElegido =((Cruz) listaFormas.get(j)).color;
            }
            if(listaFormas.get(j) instanceof Estrella){
                 colorElegido =((Estrella) listaFormas.get(j)).color;
            }
            }
            
            j++;
        }
            }
            else{
                colorElegido = colorFondo;
            }
            cuentagotas = false;
            jToggleButton3.doClick();
        }



//        if(chequeaPunto(evt.getX(),evt.getY())){
//            System.out.println("Hay algo");
//        }
//        else{
//        int radio = jSlider1.getValue();
//        switch (forma){
//            case 0 : listaFormas.add(new Circulo(evt.getX(),evt.getY(), radio, colorElegido, true)); break;
//            case 1 : listaFormas.add(new Triangulo(evt.getX(),evt.getY(), radio, radio, colorElegido, true)); break;
//            case 2 : listaFormas.add(new Cuadrado(evt.getX(),evt.getY(), radio, radio, colorElegido, true)); break;
//            case 3 : listaFormas.add(new Rombo(evt.getX(),evt.getY(), radio, radio, colorElegido, true)); break;
//            case 4 : listaFormas.add(new Cruz(evt.getX(),evt.getY(), radio, radio, colorElegido, true)); break;
//            case 5 : listaFormas.add(new Estrella(evt.getX(),evt.getY(), radio, radio, colorElegido, true)); break;
//        }
//                }
        repaint();
    }//GEN-LAST:event_jPanel1MousePressed

    private void jPanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseDragged
//        listaLineas.add(new Circulo(evt.getX(),evt.getY(), radio, Color.ORANGE, true));
//        listaNuevaCirculos.add(listaLineas);
        if(!rellenar){
        switch(forma){                                                                                  //Esta parte del código se usa para que al arrastrar los objetos justo despues de crearlos, se hagan mas grandes o mas pequeños.
            case 0:{
                Circulo aux = (Circulo) listaFormas.get(listaFormas.size() -1);
                int ancho = 1;
                int alto = 1;
                if(evt.getX() > (int) posx){
                    ancho = (int) (evt.getX() - aux.x);
                    alto = (int) (evt.getY() - aux.y);
                    aux.width = ancho;
                    aux.height = alto;
                }
                else{
                    ancho = (int) (posx - aux.x);
                    alto = (int) (posy - aux.y);    
                    aux.x = evt.getX();
                    aux.y = evt.getY();
                    aux.width = Math.abs(ancho);
                    aux.height = Math.abs(alto);
                }
                
            }break;
                case 1:{
                Triangulo aux = (Triangulo) listaFormas.get(listaFormas.size() -1);             //A partir del triangulo todos funcionan de la misma forma, sobreescribiendo los puntos de el primer triangulo con los nuevos.
                int ancho = 1;
                int alto = 1;
                int puntoX = aux.xpoints[0];
                int puntoY = aux.ypoints[0];
                ancho = (int) (evt.getX() - puntoX);
                alto = (int) (evt.getY() - puntoY);
                aux.xpoints[1] = puntoX + ancho;
                    
                aux.xpoints[2] = puntoX + ancho/2;
                aux.ypoints[2] = puntoY + alto;
                
                
                
            }break;
                case 2:{
                Cuadrado aux = (Cuadrado) listaFormas.get(listaFormas.size() -1);
                int ancho = 1;
                int alto = 1;
                int puntoX = aux.xpoints[0];
                int puntoY = aux.ypoints[0];
                
                
                ancho = (int) (evt.getX() - puntoX);
                alto = (int) (evt.getY() - puntoY);
                aux.xpoints[1] = puntoX + ancho;
                    
                aux.xpoints[2] = puntoX + ancho;
                aux.ypoints[2] = puntoY + alto;
                    
                aux.ypoints[3] = puntoY + alto;
                    
                
            }break;
                case 3:{
                
                
                Rombo aux = (Rombo) listaFormas.get(listaFormas.size() -1);
                int ancho = 1;
                int alto = 1;
                if(i == 0){
                    puntoX = aux.xpoints[0];
                    puntoY = aux.ypoints[0];
                    i++;
                }
                ancho = (int) (evt.getX() - puntoX);
                alto = (int) (evt.getY() - puntoY);
                aux.xpoints[0] = puntoX + (ancho/2);
                
                aux.ypoints[1] = puntoY + (alto/2);
                
                aux.xpoints[2] = puntoX + (ancho/2);
                aux.ypoints[2] = puntoY + alto;
                    
                aux.xpoints[3] = puntoX + ancho;
                aux.ypoints[3] = puntoY + (alto/2);
                    
                
            }break;
            case 4:{
                
                
                Cruz aux = (Cruz) listaFormas.get(listaFormas.size() -1);
                int ancho = 1;
                int alto = 1;
                if(i == 0){
                    puntoX = aux.puntoInicioX;
                    puntoY = aux.puntoInicioY;
                    i++;
                }
                
                ancho = (int) (evt.getX() - puntoX);
                alto = (int) (evt.getY() - puntoY);
                aux.reset();
                aux.addPoint(puntoX, puntoY);
                aux.addPoint(puntoX, puntoY - alto);
                aux.addPoint(puntoX + ancho, puntoY - alto);
                aux.addPoint(puntoX + ancho, puntoY);
                aux.addPoint(puntoX + (ancho*2), puntoY);
                aux.addPoint(puntoX + (ancho*2), puntoY + alto);
                aux.addPoint(puntoX + ancho, puntoY + alto);
                aux.addPoint(puntoX + ancho, puntoY + (alto*2));
                aux.addPoint(puntoX, puntoY + (alto*2));
                aux.addPoint(puntoX, puntoY + alto);
                aux.addPoint(puntoX - ancho, puntoY + alto);
                aux.addPoint(puntoX - ancho, puntoY);
            }break;
                case 5:{
                Estrella aux = (Estrella) listaFormas.get(listaFormas.size() -1);
                int ancho = 1;
                int alto = 1;
                if(i == 0){
                    puntoX = aux.puntoInicioX;
                    puntoY = aux.puntoInicioY;
                    i++;
                }
                ancho = (int) (evt.getX() - puntoX);
                alto = (int) (evt.getY() - puntoY);
                aux.reset();
                aux.addPoint((int) (puntoX + ancho*Math.cos(0 * 2 * Math.PI/5)),
                    (int) (puntoY + alto*Math.sin(0 *2 * Math.PI/5)));
                aux.addPoint((int) (puntoX + ancho*Math.cos(2 * 2 * Math.PI/5)),
                    (int) (puntoY + alto*Math.sin(2 *2 * Math.PI/5)));
                aux.addPoint((int) (puntoX + ancho*Math.cos(4 * 2 * Math.PI/5)),
                    (int) (puntoY + alto*Math.sin(4 *2 * Math.PI/5)));
                aux.addPoint((int) (puntoX + ancho*Math.cos(1 * 2 * Math.PI/5)),
                    (int) (puntoY + alto*Math.sin(1 *2 * Math.PI/5)));
                aux.addPoint((int) (puntoX + ancho*Math.cos(3 * 2 * Math.PI/5)),
                    (int) (puntoY + alto*Math.sin(3 *2 * Math.PI/5)));
                
            }break;
                    case 6:{
                Linea aux = (Linea) listaFormas.get(listaFormas.size() -1);
                int ancho = 1;
                int alto = 1;
                int puntoX = aux.xpoints[0];
                int puntoY = aux.ypoints[0];
                
                
                ancho = (int) (evt.getX() - puntoX);
                alto = (int) (evt.getY() - puntoY);
                aux.xpoints[1] = puntoX + ancho;
                aux.ypoints[1] = puntoY + alto; 
                
                    
                
            }break;
        }
        
//        int radio = jSlider1.getValue();
//        switch (forma){
//            case 0 : listaFormas.add(new Circulo(evt.getX(),evt.getY(), radio, colorElegido, true)); break;
//            case 1 : listaFormas.add(new Triangulo(evt.getX(),evt.getY(), radio, radio, colorElegido, true)); break;
//            case 2 : listaFormas.add(new Cuadrado(evt.getX(),evt.getY(), radio, radio, colorElegido, true)); break;
//            case 3 : listaFormas.add(new Rombo(evt.getX(),evt.getY(), radio, radio, colorElegido, true)); break;
//            case 4 : listaFormas.add(new Cruz(evt.getX(),evt.getY(), radio, radio, colorElegido, true)); break;
//            case 5 : listaFormas.add(new Estrella(evt.getX(),evt.getY(), radio, radio, colorElegido, true)); break;
//        }
//        
//        
        repaint();
        }
    }//GEN-LAST:event_jPanel1MouseDragged

    private void jButton1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MousePressed
        if(listaFormas.size() > 0){                                                     // Boton deshacer.
            listaFormas.remove(listaFormas.size()-1);
            repaint();
        }
        
        
        
    }//GEN-LAST:event_jButton1MousePressed

    private void jButton2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MousePressed
       listaFormas.clear();                                                             //Boton para borrar todo.
       colorFondo = Color.WHITE;
       repaint();
       linea1 = false;
    }//GEN-LAST:event_jButton2MousePressed

    private void jSlider1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSlider1MousePressed
        jLabel1.setText(String.valueOf(jSlider1.getValue()));
    }//GEN-LAST:event_jSlider1MousePressed

    private void jSlider1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSlider1MouseDragged
        jLabel1.setText(String.valueOf(jSlider1.getValue()));
    }//GEN-LAST:event_jSlider1MouseDragged

    private void jButton3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MousePressed
        forma = 1;                                                              // Modo Triangulo
        linea1 = false;
    }//GEN-LAST:event_jButton3MousePressed

    private void jButton4MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MousePressed
        forma = 0;                                                      // Modo Circulo
        linea1 = false;
    }//GEN-LAST:event_jButton4MousePressed

    private void BotonColorMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonColorMousePressed
        jDialog1.setSize(800, 600);
        jDialog1.setVisible(true);
    }//GEN-LAST:event_BotonColorMousePressed

    private void BotonAceptarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonAceptarMousePressed
        colorElegido = jColorChooser1.getColor();                               //Elige el color
        jDialog1.setVisible(false);
    }//GEN-LAST:event_BotonAceptarMousePressed

    private void jButton5MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MousePressed
        forma = 2;                                                              //Modo Cuadrado
        linea1 = false;
    }//GEN-LAST:event_jButton5MousePressed

    private void jButton6MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton6MousePressed
        forma = 3;                                                              //Modo Rombo
        linea1 = false;
    }//GEN-LAST:event_jButton6MousePressed

    private void jButton7MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton7MousePressed
        forma = 4;                                                              //Modo Cruz
        linea1 = false;
    }//GEN-LAST:event_jButton7MousePressed

    private void jButton8MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton8MousePressed
        forma = 5;                                                              //Modo Estrella
        linea1 = false;
    }//GEN-LAST:event_jButton8MousePressed

    private void jToggleButton2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jToggleButton2MousePressed
        if(rellenar){
            rellenar = false;
        }
        else{
            rellenar = true;
        }
    }//GEN-LAST:event_jToggleButton2MousePressed

    private void jButton9MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton9MousePressed
        forma = 6;                                                              //Modo Linea
    }//GEN-LAST:event_jButton9MousePressed

    private void jMenuItem1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem1MousePressed
        
        
    }//GEN-LAST:event_jMenuItem1MousePressed

    private void BotonCancelarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonCancelarMousePressed
        jDialog1.setVisible(false);
    }//GEN-LAST:event_BotonCancelarMousePressed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        jFileChooser1.setFileFilter(new FileNameExtensionFilter("archivos de imagenes jpg","jpg"));             //Para guardar la imagen
        jFileChooser1.setFileFilter( new FileNameExtensionFilter("archivos de imagenes png","png"));            
        int seleccion = jFileChooser1.showSaveDialog(this);
        switch (seleccion){
            case JFileChooser.APPROVE_OPTION : {
                File fichero = jFileChooser1.getSelectedFile();
                String nombre = fichero.getName();
                String extension = nombre.substring(nombre.lastIndexOf('.')+1, nombre.length());
                if(extension.equalsIgnoreCase("jpg") || extension.equalsIgnoreCase("png")){
                    try {
                ImageIO.write(buffer, "jpg", fichero);
            } catch (IOException ex) {
                Logger.getLogger(VentanaDibujo.class.getName()).log(Level.SEVERE, null, ex);
            }
                }
            
            }break;
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jToggleButton3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jToggleButton3MousePressed
        if(cuentagotas){
            cuentagotas = false;
        }
        else{
            cuentagotas = true;
        }
    }//GEN-LAST:event_jToggleButton3MousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaDibujo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaDibujo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaDibujo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaDibujo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaDibujo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonAceptar;
    private javax.swing.JButton BotonCancelar;
    private javax.swing.JButton BotonColor;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JColorChooser jColorChooser1;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton jToggleButton3;
    // End of variables declaration//GEN-END:variables
}
